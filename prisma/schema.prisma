// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String
  name           String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  problems       Problem[]
  comments       Comment[]
  upvotedProblems   Problem[] @relation("UserUpvotedProblems")
  downvotedProblems Problem[] @relation("UserDownvotedProblems")
}

model Problem {
  id             Int       @id @default(autoincrement())
  title          String
  description    String
  industry       String
  solutionLink   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  author         User      @relation(fields: [authorId], references: [id])
  authorId       Int
  
  comments       Comment[]
  
  upvotedBy      User[]    @relation("UserUpvotedProblems")
  downvotedBy    User[]    @relation("UserDownvotedProblems")
}

model Comment {
  id             Int       @id @default(autoincrement())
  content        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  author         User      @relation(fields: [authorId], references: [id])
  authorId       Int
  
  problem        Problem   @relation(fields: [problemId], references: [id])
  problemId      Int
  
  // For threaded comments (reply to another comment)
  parentId       Int?
  parent         Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies        Comment[] @relation("CommentReplies")
}
